%For loop to read all audio files in the folder 
folder = 'N:\BME_252_Phase3\audio';
audio_files = dir(fullfile(folder, '*.wav'));
for n = 1:length(audio_files)
  filename = strcat(folder, '\', audio_files(n).name);
  %disp(filename);
  info = audioinfo(filename);
  %task 3.1
  [y,Fs] = audioread(filename); %Fs is the sampling rate 
  
  if info.SampleRate > 16000
    info = audioinfo(filename); %info.SampleRate is also sampling rate 
    [y,Fs] = audioread(filename);
    %task 3.2
    if info.NumChannels > 1
      y_mono = sum(y, 2); 
    end
    %task 3.3
    %sound(y_mono, Fs); %play the mono sound 
   
    %task 3.6 
    if info.SampleRate > 16000
      downsampled_y = resample(y_mono, 16000, Fs); 
    end
    
    %task 3.4 
    new_file = strcat('New_', audio_files(n).name); 
    audiowrite(new_file, downsampled_y, 16000); 
    new_info = audioinfo(new_file); 

    %task 3.5 
    fig1 = strcat(audio_files(n).name, ' Audio Signal');
    figure('Name', fig1);
    plot(downsampled_y); 
    xlabel('Sample Number', 'FontSize', 16);
    ylabel('Audio Signal Amplitude', 'FontSize', 16); 
%     %task 3.7 
%     fig2 = strcat(audio_files(n).name, ' Cos Function');
%     figure('Name', fig2);
%     freq = 1000;
%     w = 2*pi*freq; 
%     step = info.Duration/info.TotalSamples; 
%     period = 1/freq;  
%     t = 0:step:2*period; 
%     plot(t, cos(w*t)); 
%     xlabel('Time','FontSize', 16); 
%     ylabel('Signal','FontSize', 16); 
% 
%     t_step = 1/(info.Duration*freq); %1/number of cycles 
%     t_sound = 0:t_step:info.Duration; 
%     sound(cos(w*t_sound), 16000); %play sound generated by the signal
    
%%%%%%%%%%%%%%%%%%%%%---PHASE 2---%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%--Task 4
numChan = 12; %Number of channels
channelBounds = linspace(100,8000,numChan+1);                              
%create array for filtered channels 
filteredChan = zeros(numChan, length(downsampled_y)); 

for i = 1:numChan %loop through channels 
    Fs = 16000;
    Fstop1 = 0.93*channelBounds(i); %0.93 chosen to lessen slope of attenuation (reduces complexity for MATLAB)
    Fpass1 = channelBounds(i);
    Fpass2 = channelBounds(i+1);
    if channelBounds(i+1) == 8000
        Fpass2 = Fpass2-1;
        Fstop2 = channelBounds(i+1); % Doing this since multiplying 1.07 by the highest frequency, 8000, would exceed bounds
    else
        Fstop2 = 1.07*channelBounds(i+1); %1.07 chosen to lessen slope of attenuation (reduces complexity for MATLAB)
    end
    
    Astop1 = 60;          % First Stopband Attenuation (dB)
    Apass  = 1;           % Passband Ripple (dB)
    Astop2 = 80;          % Second Stopband Attenuation (dB)
    match  = 'passband';  % Band to match exactly
       
    % Construct an FDESIGN object and call its CHEBY1 method.
    h  = fdesign.bandpass(Fstop1, Fpass1, Fpass2, Fstop2, Astop1, Apass, ...
                      Astop2, Fs);
    Hd = design(h, 'cheby1', 'MatchExactly', match); %chebyshev filter
    Hd2 = design(h, 'butter', 'MatchExactly', match); %butterworth filter

    %--Task 5    
    filtered_signal_cheb = filter(Hd, downsampled_y); 
    filteredChan(i,:) = transpose(filtered_signal_cheb); %fill array with transposed filtered cheb signal 
    filtered_signal_butter = filter(Hd2, downsampled_y);
%   filteredChan(i,:) = transpose(filtered_signal_butter); %fill array with transposed filtered cheb signal 
   
    %--Task 7&8
    abs_filtered_signal_cheb =  abs(filtered_signal_cheb);
    abs_filteredChan = abs(filteredChan); %get rectified signal of chebyshev filtered signal
%   abs_filtered_signal_butter = abs(filtered_signal_butter);
    Fpass = 400;
    Fstop = 420;
    Apass = 1; 
    Astop = 80; 
    match = 'stopband';
    
    h  = fdesign.lowpass(Fpass, Fstop, Apass, Astop, Fs);
    %low pass filters of 2 IIR filters
    Hd1 = design(h, 'cheby1', 'MatchExactly', match);
    Hd2 = design(h, 'butter', 'MatchExactly', match);
    %envelopes of 2 IIR filters
    env1 = filter(Hd1, abs_filtered_signal_cheb); 
    env2 = filter(Hd2, abs_filtered_signal_butter); 
%--Task 6
    if i == 1
        %Lowest Frequency Channel Plots for Filtered IIR signals
        figure('Name','Lowest Frequncy Band - Chebyshev');
        plot(filtered_signal_cheb);
        xlabel('Sample Number','FontSize', 16); 
        ylabel('Filtered Signal Amplitude','FontSize', 16); 
        
        %Envelope Plot 
        figure('Name','Envelope Lowest Frequncy Band - Chebyshev');
        plot(env1);
        xlabel('Sample Number','FontSize', 16); 
        ylabel('Filtered Signal Amplitude','FontSize', 16); 

        figure('Name','Lowest Frequency Band - Butterworth');
        plot(filtered_signal_butter);
        xlabel('Sample Number','FontSize', 16); 
        ylabel('Filtered Signal Amplitude','FontSize', 16);   
        
        %Envelope Plot
        figure('Name','Envelope Lowest Frequncy Band - Butterworth');
        plot(env2);
        xlabel('Sample Number','FontSize', 16); 
        ylabel('Filtered Signal Amplitude','FontSize', 16);
    end
    
    if i == numChan
        %Highest Frequency Channel Plots for Filtered IIR signals
        figure('Name','Highest Frequency Band - Chebyshev');
        plot(filtered_signal_cheb);
        xlabel('Sample Number','FontSize', 16); 
        ylabel('Filtered Signal Amplitude','FontSize', 16); 
        
        %Envelope Plot
        figure('Name','Envelope Highest Frequncy Band - Chebyshev');
        plot(env1);
        xlabel('Sample Number','FontSize', 16); 
        ylabel('Filtered Signal Amplitude','FontSize', 16); 
         
        figure('Name', 'Highest Frequency Band - Butterworth');
        plot(filtered_signal_butter);
        xlabel('Sample Number','FontSize', 16); 
        ylabel('Filtered Signal Amplitude','FontSize', 16); 
        
        %Envelope Plot
        figure('Name','Envelope Highest Frequncy Band - Butterworth');
        plot(env2);
        xlabel('Sample Number','FontSize', 16); 
        ylabel('Filtered Signal Amplitude','FontSize', 16);
    end
    envFilteredChan = zeros(numChan, length(downsampled_y)); %create array for envelope of filtered cheb (used in phase 3)
    for i = 1:numChan
        envFilteredChan(i, :) = filter(Hd1, abs_filteredChan(i,:)); %fill array with rectified filtered signal 
    end     
end


%Code for FIR Filter - Task 4 
% for i = 1:numChan
%     Fs = 16000;  % Sampling Frequency
% 
%     Fstop1 = 100;             % First Stopband Frequency
%     Fpass1 = 120;             % First Passband Frequency
%     Fpass2 = 250;             % Second Passband Frequency
%     Fstop2 = 270;             % Second Stopband Frequency
%     Dstop1 = 0.001;           % First Stopband Attenuation
%     Dpass  = 0.057501127785;  % Passband Ripple
%     Dstop2 = 0.0001;          % Second Stopband Attenuation
%     dens   = 20;              % Density Factor
% 
%     % Calculate the order from the parameters using FIRPMORD.
%     [N, Fo, Ao, W] = firpmord([Fstop1 Fpass1 Fpass2 Fstop2]/(Fs/2), [0 1 ...
%                               0], [Dstop1 Dpass Dstop2]);
% 
%     % Calculate the coefficients using the FIRPM function.
%     b  = firpm(N, Fo, Ao, W, {dens});
%     Hd = dfilt.dffir(b);
% 
%     %Task 5 - filter for FIR   
%     filtered_signal_equir = filter(Hd, downsampled_y); 
%     filteredChan(i,:) = transpose(filtered_signal_equir); %fill array with transposed filtered cheb signal 
%     %Task 7 
%     abs_filtered_signal_equir = abs(filtered_signal_equir);
%     abs_filteredChan = abs(filteredChan); %get rectified signal of chebyshev filtered signal
%     %Task 8 
%     Fpass = 400;             % Passband Frequency
%     Fstop = 420;             % Stopband Frequency
%     Dpass = 0.057501127785;  % Passband Ripple
%     Dstop = 0.0001;          % Stopband Attenuation
%     dens  = 20;              % Density Factor
% 
%     % Calculate the order from the parameters using FIRPMORD.
%     [N, Fo, Ao, W] = firpmord([Fpass, Fstop]/(Fs/2), [1 0], [Dpass, Dstop]);
% 
%     % Calculate the coefficients using the FIRPM function.
%     b  = firpm(N, Fo, Ao, W, {dens});
%     %low pass filter for FIR 
%     Hd = dfilt.dffir(b);
%     
%     %envelope for FIR filter
%     env3 = filter(Hd, abs_filtered_signal_equir); 
%     
%     %Task 6
%     if i == 1
%         %Lowest Frequency Channel Plots for Filtered FIR signals
%         figure('Name','Lowest Frequncy Band - Equiripple');
%         plot(filtered_signal_equir);
%         xlabel('Sample Number','FontSize', 16); 
%         ylabel('Filtered Signal Amplitude','FontSize', 16); 
%         
%         %Envelope Plot - task 9 
%         figure('Name','Envelope Lowest Frequncy Band - Equiripple');
%         plot(env3);
%         xlabel('Sample Number','FontSize', 16); 
%         ylabel('Filtered Signal Amplitude','FontSize', 16); 
% 
%     end
%     if i == numChan
%         %Highest Frequency Channel Plots for Filtered FIR signals
%         figure('Name','Highest Frequency Band - Equiripple');
%         plot(filtered_signal_equir);
%         xlabel('Sample Number','FontSize', 16); 
%         ylabel('Filtered Signal Amplitude','FontSize', 16); 
%         
%         %Envelope Plot - task 9 
%         figure('Name','Envelope Highest Frequncy Band - Equiripple');
%         plot(env3);
%         xlabel('Sample Number','FontSize', 16); 
%         ylabel('Filtered Signal Amplitude','FontSize', 16); 
%     end    
%     envFilteredChan = zeros(numChan, length(downsampled_y)); %create array for envelope of filtered cheb (used in phase 3)
%     for i = 1:numChan
%         envFilteredChan(i, :) = filter(Hd, abs_filteredChan(i,:)); %fill array with rectified filtered signal 
%     end
% end
%%%%%%%%%%%%%%%%%%%%%---PHASE 3---%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Task 10 - Generating Cosine Functions 
cosSignals = zeros(numChan, length(downsampled_y)); 
for i = 1:numChan
    lenChan = length(envFilteredChan(i, :)); 
    duration = lenChan/16000; 
    x = linspace(0, duration, lenChan);
    cenFreq = sqrt(channelBounds(i)*channelBounds(i + 1));
    cosineSig =  cos(cenFreq*2*pi*x);
    cosSignals(i,:) = cosineSig;
end
%Task 11 - Amplitude Modulation using Rectified Signals 
ampModSignal = zeros(numChan, length(downsampled_y));
for i = 1:numChan
    rectified = envFilteredChan(i, :);
    modulate = cosSignals(i, :);
    ampModSignal(i, :) = rectified .* modulate;
end 

%Task 12 - Add signals together 
outputSig = zeros(1, lenChan);
for i = 1:numChan
    outputSig = outputSig + ampModSignal(i, :);
end
maxAbsSig = max(abs(outputSig));
%normalize the output signal by its max val
outputSig = outputSig/maxAbsSig;

%Task 13 - Play the output sound 
sound(outputSig, 16000);
%write to new sound file
outputFile = strcat('Final_output_', audio_files(n).name);
audiowrite(outputFile, outputSig, 16000);

    else
    disp('The sampling rate of this audio file is less than 16kHz. Please choose a different file.'); 
 end
end

